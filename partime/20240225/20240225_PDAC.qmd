---
title: "20240225"
author: "YinCY"
format: html
---


# ref
```{r}
annotations <- read.table(file = "../../../data/partime/GSE205049/GSE205049_scRNA-seq-annotations.csv.gz", 
                          sep = ",", 
                          header = TRUE, 
                          row.names = 1)
annotations
```

```{r}
mtx <- data.table::fread("../../../data/partime/GSE205049/GSE205049_scRNA-seq-integrated_GEM.csv.gz", 
                         sep = ",", 
                         header = TRUE) %>% 
    as.data.frame() %>% 
    tibble::column_to_rownames("V1")
mtx %>% dim
mtx[1:10, 1:10]
```

```{r}
gene_df <- data.frame(symbol = rownames(mtx), 
                      ensembl = mapIds(EnsDb.Hsapiens.v86, keys = rownames(mtx), keytype = "SYMBOL", column = "GENEID"), 
                      row.names = rownames(mtx))
gene_df
```

```{r}
ref <- SingleCellExperiment(assay = list(counts = as(as.matrix(mtx), "CsparseMatrix")), 
                                         colData = annotations, 
                                         rowData = gene_df)
ref %>% colData
ref %>% rowData
saveRDS(ref, "../../../data/partime/GSE205049/ref.rds")
```

```{r}
ref <- computePooledFactors(x = ref, clusters = ref$type)
ref <- logNormCounts(x = ref)
ref %>% colData
dec <- modelGeneVar(x = ref, block = ref$orig.ident)
hvgs <- getTopHVGs(dec, var.threshold = 0.001)
hvgs %>% str
```

```{r}
set.seed(101)
ref <- correctExperiments(ref, batch = ref$orig.ident, 
                          PARAM = FastMnnParam(auto.merge = TRUE), 
                          subset.row = hvgs, 
                          correct.all = TRUE)

ref <- runTSNE(x = ref, dimred = "corrected")

clusters <- clusterRows(x = reducedDim(ref, type = "corrected"), 
                        BLUSPARAM = NNGraphParam(k=15))
clusters %>% table
colData(ref)$clusters <- factor(clusters)
saveRDS(ref, "../../../data/partime/GSE205049/processed_ref.rds")
```

```{r}
plotReducedDim(ref, 
               dimred = "TSNE", 
               color_by = "major", 
               text_by = "major",
               point_size = 0.5) +
    guides(color = guide_legend(override.aes = list(size = 3)))
```

# data
GSE205049
```{r}
# rename and move files
dir_create("../../../data/partime/GSE205049/data")
untar(tarfile = "../../../data/partime/GSE205049/GSE205049_RAW.tar",
      exdir = "../../../data/partime/GSE205049/data")

files <- dir_ls(path = "../../../data/partime/GSE205049/data/", type = "file")
sample_names <- str_extract_between(files, pattern1 = "/", pattern2 = "-", 
                                    which_pattern1 = "last", 
                                    which_pattern2 = "last")
dir_create(path = paste("../../../data/partime/GSE205049/data/", sample_names, sep = ""))

base_names <- files %>% basename() %>% 
    str_extract_after(pattern = "-", which = "last")

new_files <- paste("../../../data/partime/GSE205049/data/", 
                   sample_names, "/", base_names, sep = "")
new_files
file_move(path = files, new_path = new_files)
```

```{r}
samples <- dir_ls("../../../data/partime/GSE205049/data/", type = "directory")
names <- samples %>% basename()
sces <- read10xCounts(samples = samples, 
                      sample.names = names, 
                      col.names = TRUE, 
                      type = "sparse")
sces %>% colData
sces %>% rowData
sces
```

```{r}
# cell qc
is_mito <- grepl("^MT-", rowData(sces)$Symbol, ignore.case = F)
is_mito %>% table
rowData(sces)$Symbol[is_mito]

stats <- perCellQCMetrics(x = sces, subsets = list(mito = is_mito))
qc_mito <- isOutlier(stats$subsets_mito_percent, log = TRUE, type = "high")
qc_sum <- isOutlier(stats$sum, log = TRUE, type = "both")
qc_sum %>% table

qc_detected <- isOutlier(stats$detected, log = TRUE, type = "both")
qc_detected %>% table

qc <- qc_mito | qc_sum | qc_detected
qc %>% table
```

```{r}
cbind(stats, qc) %>% as.data.frame() %>% 
    ggplot(aes(sum, detected)) +
    geom_point(aes(color = qc)) +
    scale_x_continuous(trans = "log") +
    scale_y_continuous(trans = "log")
```

```{r}
cbind(stats, qc_mito) %>% as.data.frame() %>% 
    ggplot(aes(sum, detected)) +
    geom_point(aes(color = qc_mito)) +
    scale_x_continuous(trans = "log") +
    scale_y_continuous(trans = "log")
```

```{r}
sces <- sces[, !qc]

# qc gene
stats <- perFeatureQCMetrics(sces)
qc <- stats$detected > 0.01
qc %>% table
sces <- sces[qc, ]
sces
saveRDS(sces, "../../../data/partime/GSE205049/GSE205049.rds")
```

```{r}
# sces <- readRDS("../../../data/partime/GSE205049/GSE205049.rds")

set.seed(101)
qclusters <- quickCluster(x = sces, 
                          use.rank = TRUE, 
                          d = 100, 
                          block = sces$Sample, 
                          method = "igraph")
qclusters %>% table

sces <- computePooledFactors(x = sces, clusters = qclusters, BPPARAM = MulticoreParam(10))
sces <- logNormCounts(x = sces)
dec <- modelGeneVar(x = sces, block = sces$Sample)
hvgs <- getTopHVGs(dec, var.threshold = 0)
hvgs %>% str
```

```{r}
set.seed(101)
sces <- correctExperiments(sces, 
                           batch = sces$Sample, 
                           subset.row = hvgs, 
                           PARAM = FastMnnParam(d = 100), 
                           correct.all = TRUE)
sces <- runTSNE(x = sces, dimred = "corrected")
sces <- runUMAP(sces, dimred = "corrected")

clusters <- clusterRows(x = reducedDim(sces, "corrected"), 
                        BLUSPARAM = NNGraphParam(k = 10, BPPARAM = MulticoreParam(workers = 12)))
clusters %>% table
colData(sces)$clusters <- factor(clusters)
saveRDS(sces, "../../../data/partime/GSE205049/processed_GSE205049.rds")
```

```{r}
plotReducedDim(object = sces, 
               dimred = "TSNE", 
               color_by = "Sample", 
               text_by = "clusters",
               point_size = 0.4) +
    guides(color = guide_legend(override.aes = list(size = 3)))
```

# annotation
```{r}
#| message: false
#| warning: false

library(SingleR)
library(magrittr)

ref <- readRDS("../../../data/partime/GSE205049/processed_ref.rds")
ref %>% rowData()
ref <- ref[!is.na(rowData(ref)$ensembl), ]
rownames(ref) <- rowData(ref)$ensembl
ref %>% rowData()

sces <- readRDS("../../../data/partime/GSE205049/processed_GSE205049.rds")
```

```{r}
pred_lab <- SingleR(test = sces, 
                    ref = ref, 
                    labels = ref$major)
pred_lab$pruned.labels %>% table(useNA = "ifany")
```

```{r}
cells <- table(sces$clusters, pred_lab$pruned.labels) %>% prop.table(margin = 1) %>% round(3) %>% colnames()
ids <- table(sces$clusters, pred_lab$pruned.labels) %>% prop.table(margin = 1) %>% round(3) %>% apply(1, which.max)
cells[ids] %>% table

cell_type <- setNames(cells[ids], sces$clusters %>% levels)
```

```{r}
sces$cell_type <- cell_type[sces$clusters]

saveRDS(sces, "../../../data/partime/GSE205049/processed_GSE205049.rds")
```

# visulization
```{r}
#| message: false
#| warning: false

library(scater)
library(scran)
library(tidyverse)

sces <- readRDS("../../../data/partime/GSE205049/processed_GSE205049.rds")

genes_to_visualize <- c("CD19", "CD79A", "MS4A1", "PECAM1", "VWF", 
                        "FGF7", "CD68", "CD163", "CD14", "FGFBP2", 
                        "RCVRRN", "IGHG1", "MZB1", "SDC1", "CD3D", 
                        "CD3E", "CD8A", "EPCAM", "CDH1", "CDKN2A")
```

sample
```{r}
library(patchwork)

samples <- sces$Sample %>% unique

plotReducedDim(sces[, grepl("AdjNorm", sces$Sample)], 
               dimred = "TSNE", 
               color_by = "Sample", 
               text_by = "cell_type", 
               point_size = 0.5) +
    theme_classic() +
    guides(color = guide_legend(override.aes = list(size = 3))) +

plotReducedDim(sces[, grepl("PDAC", sces$Sample)], 
               dimred = "TSNE", 
               color_by = "Sample", 
               text_by = "cell_type", 
               point_size = 0.5) +
    theme_classic() +
    guides(color = guide_legend(override.aes = list(size = 3))) 


ggsave("../../../data/partime/GSE205049/res/sample.tiff", width = 18)
```

cell type
```{r}
plotReducedDim(sces, 
               dimred = "TSNE", 
               color_by = "cell_type", 
               text_by = "cell_type", 
               point_size = 0.5) +
    theme_classic() +
    guides(color = guide_legend(override.aes = list(size = 3))) +
    scale_color_discrete(name = "cell types")
ggsave("../../../data/partime/GSE205049/res/cell_types.tiff", width = 9, height = 7)
```

clusters
```{r}
plotReducedDim(sces, 
               dimred = "TSNE", 
               color_by = "clusters", 
               text_by = "clusters", 
               point_size = 0.5) +
    theme_classic() +
    guides(color = guide_legend(override.aes = list(size = 3)))

ggsave("../../../data/partime/GSE205049/res/clusters.tiff", width = 9, height = 7)
```

DNA damage
```{r}
source("../../functions/plotSum.R")
DDR_genes <- openxlsx::read.xlsx("../../../data/partime/GSE205049/DDR.xlsx") %>% dplyr::filter(Relevance.score > 15) %>% dplyr::pull(Gene.Symbol) %>% unique
DDR_genes %>% str

plotSums(sces = sces, features = DDR_genes, feature_type = "SYMBOL")

ggsave("../../../data/partime/GSE205049/res/DDR.tiff", width = 9, height = 7)
```

gene expression
```{r}
library(scater)
library(scran)
source("../../functions/idconv.R")

df <- makePerCellDF(x = sces, 
                    features = idconv(genes_to_visualize, from_type = "SYMBOL", to_type = "GENEID", db = "human"), 
                    use.dimred = FALSE)
df <- df %>% tidyr::pivot_longer(cols = starts_with("ENSG"), names_to = "ensembl", values_to = "logcounts")
df <- df %>% dplyr::group_by(clusters, ensembl) %>% 
    mutate(pct = round(mean(logcounts > 0) * 100, 3), 
           mean_exp = round(mean(logcounts), 3))
df$symbol <- mapIds(EnsDb.Hsapiens.v86, keys = df$ensembl, keytype = "GENEID", column = "SYMBOL")

df %>% 
    ggplot(aes(symbol, clusters)) +
    geom_point(aes(size = mean_exp, color = pct)) +
    theme_classic() +
    theme(axis.text.x = element_text(angle = -50, hjust = 0)) +
    scale_y_discrete(name = NULL) +
    scale_x_discrete(name = NULL) +
    viridis::scale_color_viridis(name = "percent\nexpression", discrete = F) +
    scale_size_area(name = "mean\nexpression")

ggsave("../../../data/partime/GSE205049/res/gene_expression.tiff", width = 9)
```

cell cycle
```{r}
hsa_pairs <- readRDS(system.file("exdata", "human_cycle_markers.rds", package = "scran"))


assignment <- scyclone(x = sces, 
        pairs = hsa_pairs, 
        gene.names = rownames(sces))
assignments$scores %>% dim
assignments$phases %>% table

sces$phase <- assignments$phases
```

```{r}
sces <- sces[, !is.na(sces$phase)]

plotReducedDim(object = sces, 
               dimred = "TSNE", 
               color_by = "phase", 
               text_by = "cell_type", 
               point_size = 0.5) +
    guides(color = guide_legend(override.aes = list(size = 3)))

ggsave("../../../data/partime/GSE205049/res/Phase.tiff", width = 9)
```




