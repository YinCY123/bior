---
title: "nasa"
author: "YinCY"
format: html
editor: source
---

```{r}
#| message: false
#| warning: false

library(fs)
library(R.utils)
library(magrittr)
library(DropletUtils)
library(scater)
library(scran)
library(bluster)
library(EnsDb.Mmusculus.v79)
library(batchelor)
library(SingleCellExperiment)
library(magrittr)
library(scDblFinder)
```

```{r}
files <- dir_ls("/home/yincy/git/data/parttime/nasa/data/", type = "file")
for(file in files){unzip(zipfile = file, exdir = "/home/yincy/git/data/parttime/nasa/data/")}
```

```{r}
samples <- dir_ls("/home/yincy/git/data/parttime/nasa/", type = "directory", recurse = TRUE)
samples <- grep("filtered$", samples, value = TRUE)
samples %>% str

sample_names <- strsplit(samples, "/") %>% sapply("[[", 9)
```

```{r}
sces <- read10xCounts(samples = samples, 
                      sample.names = sample_names, 
                      col.names = TRUE, 
                      type = "sparse", 
                      BPPARAM = BiocParallel::MulticoreParam(workers = 10))
sces %>% rowData()
sces %>% colData()
rowData(sces)$chr <- mapIds(x = EnsDb.Mmusculus.v79, 
                            keys = rownames(rowData(sces)), 
                            keytype = "GENEID", 
                            column = "SEQNAME")
rowData(sces)
sces$Sample %>% table
```

```{r}
# cell qc
is_mito <- rowData(sces)$chr == "MT"
is_mito <- ifelse(is.na(is_mito), FALSE, is_mito)
is_mito %>% table
stats <- perCellQCMetrics(x = sces, 
                          subsets = list(mito = is_mito), 
                          BPPARAM = BiocParallel::MulticoreParam(10))

qc_sum <- isOutlier(stats$sum, type = "both", log = TRUE, batch = sces$Sample)
qc_sum %>% table

qc_detected <- isOutlier(stats$detected, type = "both", log = TRUE, batch = sces$Sample)
qc_detected %>% table

qc_mito <- isOutlier(stats$subsets_mito_percent, type = "higher", log = TRUE, batch = sces$Sample)
qc_mito %>% table

qc <- qc_sum | qc_detected | qc_mito
qc %>% table

sces <- sces[, !qc]
```

```{r}
# gene qc
stats <- perFeatureQCMetrics(sces)
stats
qc <- stats$detected > 0
qc %>% table
sces <- sces[qc, ]
sces
saveRDS(sces, "/home/yincy/git/data/parttime/nasa/nasa.rds")
```

```{r}
set.seed(101)
sces <- readRDS("/home/yincy/git/data/parttime/nasa/nasa.rds")
qclusters <- quickCluster(sces, 
                          method = "igraph", 
                          use.rank = TRUE, 
                          d = 100, 
                          block = sces$Sample, 
                          BPPARAM = BiocParallel::MulticoreParam(10))
qclusters %>% table

sces <- computePooledFactors(x = sces, 
                             clusters = qclusters, 
                             BPPARAM = BiocParallel::MulticoreParam(10))
sces <- multiBatchNorm(sces, batch = sces$Sample)

stats <- modelGeneVar(x = sces, block = sces$Sample)
stats[order(stats$bio, decreasing = T), ]
hvgs <- getTopHVGs(stats, var.threshold = 0)
hvgs %>% str
```

```{r}
set.seed(101)
cur <- sces
cur <- batchCorrect(cur, 
                    batch = cur$Sample,
                    subset.row = hvgs, 
                    correct.all = TRUE, 
                    PARAM = FastMnnParam(k = 10, d = 100, auto.merge = TRUE, 
                                         BPPARAM = BiocParallel::MulticoreParam(10)))
assay(sces, "reconstructed") <- assay(cur, "reconstructed")
reducedDim(sces, "corrected") <- reducedDim(cur, "corrected")
rm(cur);gc()
```

```{r}
set.seed(101)
sces <- runTSNE(x = sces, 
                dimred = "corrected", 
                assay.type = "reconstructed", 
                perplexity = 50, 
                num_threads = 10, 
                BPPARAM = BiocParallel::MulticoreParam(10))
```

```{r}
set.seed(101)
sces <- scDblFinder(sce = sces, clusters = sces$clusters, samples = sces$Sample)
sces$scDblFinder.class %>% table
sces <- sces[, sces$scDblFinder.class == "singlet"]


set.seed(101)
clusters <- clusterRows(x = reducedDim(sces, "corrected"), 
                        BLUSPARAM = NNGraphParam(BPPARAM = BiocParallel::MulticoreParam(10), k = 10))
clusters %>% table
colData(sces)$clusters <- factor(clusters)

saveRDS(sces, "/home/yincy/git/data/partime/nasa/processed_nasa.rds")
```

```{r}
sces <- readRDS("/home/yincy/git/data/partime/nasa/processed_nasa.rds")
sces %>% colData

plotReducedDim(sces, 
               dimred = "TSNE", 
               colour_by = "clusters",
               point_size = 0.5) +
  theme(legend.position = "none")
```

# reference
```{r}
#| message: false
#| warning: false

library(data.table)
library(magrittr)
library(stringr)
library(stringr.plus)
library(EnsDb.Mmusculus.v79)
library(SingleCellExperiment)
library(scran)
library(scater)
library(bluster)
library(batchelor)
library(Seurat)

GSE122465 <- fread("/home/yincy/git/data/partime/nasa/reference/GSE122465_FilteredCounts10x.csv.gz", 
                   sep = ",", 
                   header = TRUE) %>% 
    as.data.frame()
GSE122465 %>% dim

gene_info <- data.frame(symbol = GSE122465$V1, 
                        ensembl = mapIds(EnsDb.Mmusculus.v79, keys = GSE122465$V1, keytype = "SYMBOL", column = "GENEID"))
gene_info$ensembl %>% is.na() %>% table
gene_info <- gene_info %>% dplyr::filter(!is.na(ensembl)) %>% tibble::remove_rownames() %>% magrittr::set_rownames(value = .$ensembl)
gene_info %>% head

GSE122465 <- GSE122465 %>% dplyr::filter(V1 %in% gene_info$symbol)
```

```{r}
cell_info <- data.frame(barcodes = GSE122465 %>% colnames() %>% .[-1], 
                        row.names = GSE122465 %>% colnames() %>% .[-1])

cell_info %>% dim
cell_info %>% tail
batch <- str_extract_between(cell_info$barcodes, 
                             pattern1 = "_", 
                             pattern2 = "_", 
                             which_pattern1 = "first", 
                             which_pattern2 = "last") %>% 
  str_extract_after(pattern = "_")
batch %>% table

cell_info$batch <- batch
cell_info
```

```{r}
mtx <- dplyr::inner_join(GSE122465, gene_info, by = c("V1" = "symbol")) %>% 
  dplyr::relocate(ensembl, .before = V1)
mtx <- mtx %>% tibble::column_to_rownames("ensembl") %>% dplyr::select(-V1) %>% as.matrix()
mtx[1:10, 1:10]
```

```{r}
GSE122465 <- SingleCellExperiment(assays = list(counts = as(mtx, "CsparseMatrix")), 
                                  rowData = gene_info, 
                                  colData = cell_info)
GSE122465
GSE122465 %>% colData
GSE122465 %>% rowData
saveRDS(GSE122465, "/home/yincy/git/data/partime/nasa/reference/GSE122465.rds")
```


```{r}
# unzip("/home/yincy/git/data/parttime/nasa/reference/RNAMagnetDataBundle.zip", 
#       exdir = "/home/yincy/git/data/parttime/nasa/reference/")
load("/home/yincy/git/data/parttime/nasa/reference/NicheData10x.rda")
NicheData10x <- Seurat::UpdateSeuratObject(NicheData10x)
NicheData10x[[]]$cell_type <- Idents(NicheData10x)
cell_type_df <- NicheData10x[[]]
cell_types <- setNames(cell_type_df$cell_type, rownames(cell_type_df))

colData(GSE122465)$cell_types <- cell_types[GSE122465$barcodes]
colData(GSE122465)
saveRDS(GSE122465, "/home/yincy/git/data/parttime/nasa/reference/processed_GSE122465.rds")
```

```{r}
qclusters <- quickCluster(x = GSE122465, 
                          min.size = 50,
                          d = 50, 
                          method = "igraph", 
                          use.rank = TRUE, 
                          BPPARAM = BiocParallel::MulticoreParam(10), 
                          block = GSE122465$batch)
qclusters %>% table
GSE122465$qclusters <- factor(qclusters)

GSE122465 <- computePooledFactors(x = GSE122465, clusters = GSE122465$qclusters)
GSE122465 <- logNormCounts(x = GSE122465, size.factors = GSE122465$sizeFactor)
dec <- modelGeneVar(GSE122465, block = GSE122465$batch)
dec[order(dec$bio, decreasing = T), ]
hvgs <- getTopHVGs(dec, var.threshold = 0)
hvgs %>% str
```

```{r}
cur <- GSE122465
cur <- fastMNN(cur, 
               batch = cur$batch, 
               auto.merge = TRUE, 
               subset.row = hvgs, 
               correct.all = TRUE, 
               d = 100, 
               k = 10, 
               BPPARAM = BiocParallel::MulticoreParam(10))
cur
reducedDim(GSE122465, "corrected") <- reducedDim(cur, "corrected")
assay(GSE122465, "reconstructed") <- assay(cur, "reconstructed")
rm(cur);gc()
GSE122465
```

```{r}
GSE122465 <- runTSNE(GSE122465, 
                     dimred = "corrected", 
                     perplexity = 30, 
                     num_threads = 10)
GSE122465
saveRDS(GSE122465, "/home/yincy/git/data/parttime/nasa/reference/processed_GSE122465.rds")
```


# annotation nasa
```{r}
#| message: false
#| warning: false

library(SingleCellExperiment)
library(SingleR)
library(scran)
library(magrittr)
library(scater)
library(stringr)

GSE122465 <- readRDS("/home/yincy/git/data/partime/nasa/reference/processed_GSE122465.rds")
nasa <- readRDS("/home/yincy/git/data/partime/nasa/processed_nasa.rds")

GSE122465 %>% colData
nasa %>% colData

pred_label <- SingleR(test = nasa, 
                      ref = GSE122465, 
                      labels = GSE122465$cell_types, 
                      aggr.ref = TRUE, 
                      clusters = nasa$clusters, 
                      de.method = "classic",
                      assay.type.test = "logcounts", 
                      assay.type.ref = "logcounts", 
                      BPPARAM = BiocParallel::MulticoreParam(4))

pred_label$pruned.labels %>% table
cell_types <- setNames(pred_label$pruned.labels, rownames(pred_label))

colData(nasa)$cell_type <- cell_types[nasa$clusters]
colData(nasa) %>% colnames()
colData(nasa) <- colData(nasa)[, c(1, 2, 3, 9, 10)]
colData(nasa)
nasa <- nasa[, !is.na(nasa$cell_type)]


samples <- nasa$Sample
samples <- samples %>% 
    strsplit(split = "_") %>% 
    lapply("[", 4:7) %>% 
    sapply(function(x){str_c(x, collapse = "_")})
colData(nasa)$sample <- samples
nasa %>% colData()

group <- nasa$sample %>% 
    strsplit("_") %>% 
    lapply("[", c(1, 3)) %>% 
    sapply(function(x){str_c(x, collapse = "_")})
colData(nasa)$group <- group
nasa %>% colData
nasa$group %>% table

nasa$levels <- paste(nasa$group, nasa$cell_type, sep = "_")
nasa %>% colData()
saveRDS(nasa, "/home/yincy/git/data/partime/nasa/processed_nasa.rds")
```

```{r}
plotReducedDim(nasa, 
               color_by = "cell_type", 
               text_by = "cell_type", 
               dimred = "TSNE", 
               point_size = 0.5, 
               text_size = 2) +
  theme_classic() +
  theme(legend.position = "right")
nasa$group %>% table
nasa %>% colData()
```


# differential expression analysis
```{r}
#| message: false
#| warning: false

library(scran)
library(ggplot2)
library(magrittr)
library(scater)

nasa <- readRDS("../../../data/partime/nasa/processed_nasa.rds")
```

```{r}
nasa$Sample %>% unique
```

```{r}
nasa$cell_type %>% unique()
```

```{r}
nasa$group %>% unique
```

```{r}
library(stringr)

# all combinations
contr <- combn(unique(nasa$group), 2)
cells <- nasa$cell_type %>% unique
all_contrast_markers <- vector(mode = "list")

for(i in seq_len(ncol(contr))){
    for(cell in cells){
        cur_cell <- findMarkers(x = nasa, 
                                groups = nasa$levels, 
                                restrict = paste(contr[, i, drop = TRUE], cell, sep = "_"), 
                                assay.type = "logcounts", 
                                pval.type = "all", 
                                test.type = "t")
        all_contrast_markers[[str_c(contr[, i], collapse = "_v.s._")]][[cell]] <- cur_cell
    }
}
all_contrast_markers %>% names

saveRDS(all_contrast_markers, "../../../data/partime/nasa/res/all_contrast_markers.rds")
```


# visualization
```{r}
#| message: false
#| warning: false

library(tidyverse)
library(stringr.plus)

all_contrast_markers <- readRDS("../../../data/partime/nasa/res/all_contrast_markers.rds")
```

```{r}
# all of the 6 contrast
all_contrast_markers %>% names
```


# binary matrix
```{r}
# retain only the first df
all_contrast_markers <- lapply(all_contrast_markers, function(x){
    lapply(x, function(y){y = y[[1]]})
})

union_genes <- lapply(all_contrast_markers, function(x){sapply(x, rownames)}) %>% Reduce(union, x = .)
union_genes %>% str

cells <- c("Adipo-CAR", "Osteo-CAR", 
           "Neutrophils", "pro-B", "small pre-B.", "large pre-B.", "B cell", "NK cells", "Dendritic cells", "Monocytes", "T cells", 
           "LMPPs", "Gran/Mono prog.", "Mono prog.", "Ery prog.", "Eo/Baso prog.", "Erythroblasts", "Neutro prog.", "Mk prog.", "Ery/Mk prog.", 
           "Sinusoidal ECs")
```

```{r}
mtx_list <- vector(mode = "list", length = length(all_contrast_markers))
names(mtx_list) <- names(all_contrast_markers)

mtx_list <- lapply(mtx_list, function(x){
    x <- matrix(data = 0, 
                nrow = length(union_genes), 
                ncol = length(cells), 
                dimnames = list(union_genes, cells))
})

mtx_list %>% length
mtx_list %>% names

for(con in names(mtx_list)){
    for(cell in colnames(mtx_list[[con]])){
        up <- all_contrast_markers[[con]][[cell]] %>% as.data.frame %>% dplyr::filter(FDR <= 0.05, summary.logFC > 0) %>% rownames
        down <- all_contrast_markers[[con]][[cell]] %>% as.data.frame %>% dplyr::filter(FDR <= 0.05, summary.logFC < 0) %>% rownames
        mtx_list[[con]][up, cell] <- 1
        mtx_list[[con]][down, cell] <- -1
    }
}
```

```{r}
st <- mtx_list %>% lapply(function(x){apply(x, 2, table)})
contrs <- names(st)
n <- c(-1, 0, 1) %>% as.character()
cells <- st[[1]] %>% names

for(con in contrs){
    for(cell in cells){
        if(length(setdiff(n, names(st[[con]][[cell]]))) > 0){
            cur <- setdiff(n, names(st[[con]][[cell]]))
            for(j in cur){
                st[[con]][[cell]][j] <- 0
            }
        }
        # sorting the orders
        st[[con]][[cell]] <- st[[con]][[cell]][c("-1", "0", "1")]
    }
}

st %>% names

st <- lapply(st, function(x){
    sapply(x, function(y){as.matrix(y)})
})

for(con in contrs){
    rownames(st[[con]]) <- c("down", "nc", "up")
}

saveRDS(st, "../../../data/partime/nasa/res/all_DEG_stats.rds")
```

```{r}
library(pheatmap)

ac <- data.frame("class" = rep(c("Mesenchymal Cells", "Immune Cells", "HSPCs", "Endothelial Cells"), 
                               times = c(2, 9, 9, 1)), 
                 row.names = cells)
cols <- RColorBrewer::brewer.pal(4, "Dark2")
anno_cols <- list(class = c("Mesenchymal Cells" = cols[1], "Immune Cells" = cols[2], 
                            "HSPCs" = cols[3], "Endothelial Cells" = cols[4]))

for(con in contrs){
    pdf(paste("../../../data/partime/nasa/res/heatmap_", con, ".pdf", sep = ""), width = 11)
    pheatmap(mat = mtx_list[[con]], 
             show_rownames = FALSE, 
             cluster_cols = FALSE, 
             legend_breaks = c(-0.7, 0, 0.7), 
             legend_labels = c("down", "nc", "up"), 
             color = colorRampPalette(colors = c("darkblue", "grey90", "red"))(3), 
             # gaps_col = c(2, 11, 20), 
             annotation_col = ac, 
             annotation_colors = anno_cols, 
             pagecentre = TRUE,
             angle_col = 315)
    
    dev.off()
}
```

```{r}
all_DEG_stats <- readRDS("/home/yincy/git/data/partime/nasa/res/all_DEG_stats.rds")
all_DEG_stats %>% names
all_DEG_stats[["FLT_OLD_v.s._FLT_YNG"]][c(1, 3, 2), ] 

for(con in names(all_DEG_stats)){
    write.csv(all_DEG_stats[[con]][c(1, 3, 2), ], file = paste("/home/yincy/git/data/partime/nasa/res/", con, ".csv", sep = ""))
}
```

# GO analysis
```{r}
#| message: false
#| warning: false

library(msigdbr)
library(fgsea)
library(magrittr)
library(ggplot2)

all_contrast_markers <- readRDS("../../../data/partime/nasa/res/all_contrast_markers.rds")
```

```{r}
gene_rank_list <- vector(mode = "list", length = length(all_contrast_markers))
all_contrast_markers %>% names
names(gene_rank_list) <- names(all_contrast_markers)

to_go <- c("small pre-B.", "large pre-B.", "B cell", 
           "NK cells", "Dendritic cells", "Monocytes", 
           "Neutro prog.")
```

```{r}
for(con in names(gene_rank_list)){
    for(cell in to_go){
        gene_rank_list[[con]][[cell]] <- setNames(sign(all_contrast_markers[[con]][[cell]][[1]]$summary.logFC) * (-log10(all_contrast_markers[[con]][[cell]][[1]]$p.value)), 
                                                 all_contrast_markers[[con]][[cell]][[1]] %>% rownames)
    }
}

gene_rank_list %>% sapply(names)
```

```{r}
gene_rank_list[[1]][[1]] %>% str
```

```{r}
# msigdbr_collections()
df <- msigdbr(species = "mouse", category = "C5", subcategory = "GO:BP")
df$gs_name <- gsub("^GOBP_", "", x = df$gs_name) %>% tolower

gene_sets <- split(df$ensembl_gene, df$gs_name)
gene_sets %>% sapply(length) %>% range
gene_sets %>% sapply(length) %>% quantile(probs = seq(0, 1, 0.01))
```

```{r}
go_res <- vector(mode = "list", length = length(all_contrast_markers))
names(go_res) <- names(all_contrast_markers)
go_res
```

```{r}
set.seed(101)
for(con in names(all_contrast_markers)){
    for(cell in to_go){
        go_res[[con]][[cell]] <- fgsea(pathways = gene_sets, 
                                       stats = gene_rank_list[[con]][[cell]], 
                                       minSize = 10, 
                                       maxSize = 500)
    }
}

# go_res$FLT_OLD_v.s._FLT_YNG$Monocytes %>% dplyr::filter(NES < 0) %>% dplyr::arrange(pval)

library(openxlsx)
for(con in names(go_res)){
    write.xlsx(go_res[[con]], file = paste("/home/yincy/git/data/partime/nasa/res/GO/", con, "_GO.xlsx", sep = ""))
}
```

## visulization
```{r}
size <- 3
offset <- 0.2
expand <- 15
for(con in names(go_res)){
    for(cell in to_go){
        df <- rbind(go_res[[con]][[cell]] %>% dplyr::filter(NES > 0) %>% dplyr::arrange(pval) %>% head(10), 
                    go_res[[con]][[cell]] %>% dplyr::filter(NES < 0) %>% dplyr::arrange(pval) %>% head(10))
        
        df <- df %>% 
            dplyr::mutate(log10pval = ifelse(NES > 0, -log10(pval), log10(pval)), 
                          color = ifelse(NES > 0, "tomato", "steelblue")) %>% 
            dplyr::group_by(color) %>% 
            dplyr::arrange(-log10pval) %>% 
            dplyr::ungroup() %>% 
            dplyr::mutate(y = nrow(.):1)
        
        # print(paste(con, "--", cell, sep = ""))
        # print(df)
        
        rng <- df$log10pval %>% range
        
        df %>% 
            ggplot(aes(log10pval, reorder(pathway, log10pval))) +
            geom_bar(aes(fill = color), stat = "identity") +
            geom_text(data = df[df$NES > 0, ], aes(x = -offset, y = y, label = pathway), hjust = 1, size = size) +
            geom_text(data = df[df$NES < 0, ], aes(x = offset, y = y, label = pathway), hjust = 0, size = size) +
            scale_y_discrete(name = NULL, label = NULL) +
            scale_fill_identity() +
            scale_x_continuous(name = "-log10 P-value",
                               breaks = round(c(rev(seq(0, min(-expand, rng[1]), -5)), seq(5, max(expand, rng[2]), 5)), 0),
                               labels = round(abs(c(rev(seq(0, min(-expand, rng[1]), -5)), seq(5, max(expand, rng[2]), 5))), 0), 
                               limits = range(min(-expand, rng[1]), max(expand, rng[2]))) +
            theme_classic() +
            theme(axis.ticks.y = element_blank(), 
                  panel.grid.major.y = element_line(linetype = 2, linewidth = 0.3))
        
        ggsave(paste("/home/yincy/git/data/partime/nasa/res/GO/", con, "_", cell, "_GO.tiff", sep = ""), 
               width = 12)
    }
}
```


## KEGG
```{r}
msigdbr_collections()
df <- msigdbr(species = "mouse", category = "C2", subcategory = "CP:KEGG")
df$gs_name <- gsub("^KEGG_", "", df$gs_name) %>% tolower()
df
gene_sets <- split(df$ensembl_gene, df$gs_name)
gene_sets %>% sapply(length) %>% quantile(probs = seq(0, 1, 0.01))
```

```{r}
kegg_res <- vector(mode = "list", length = length(all_contrast_markers))
names(kegg_res) <- names(all_contrast_markers)
```

```{r}
set.seed(101)
for(con in names(all_contrast_markers)){
    for(cell in to_go){
        kegg_res[[con]][[cell]] <- fgsea(pathways = gene_sets, 
                                       stats = gene_rank_list[[con]][[cell]], 
                                       minSize = 10, 
                                       maxSize = 500)
    }
}
```

```{r}
library(openxlsx)
for(con in names(kegg_res)){
    write.xlsx(kegg_res[[con]], file = paste("/home/yincy/git/data/partime/nasa/res/KEGG/", con, "_kegg.xlsx", sep = ""))
}
```


