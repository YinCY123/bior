---
title: "maEndToEnd"
author: "YinCY"
format: html
editor: source
---


# Introduction
In this article we introduce a complete workflow for a typical (Affymetrix) microarray analysis. Data import, pre-processing, differential expression and enrichment analysis are discussed.

The data set used is from a paper studying the differences in gene expression in inflamed and non-inflamed tissue. 14 patients suffering from Ulcerative colitis (UC) and 15 patients with Crohn’s disease (CD) were tested, and from each patient inflamed and non-inflamed colonic mucosa tissue was obtained via a biopsy. This is a typical clinical data set consisting of 58 arrays in total. Our aim is to analyze differential expression (DE) between the tissues. Our results show a substantial overlap with the results of the original paper.

```{r}
#| message: false
#| warning: false

library(Biobase)
library(oligoClasses)

library(ArrayExpress)
library(pd.hugene.1.0.st.v1)
library(hugene10sttranscriptcluster.db)

# quality control and pre-processing
library(oligo)
library(arrayQualityMetrics)

# analysis and statistics
library(limma)
library(topGO)

library(ggplot2)
library(tidyr)
library(dplyr)
library(janitor)
library(fs)
library(stringr)
```

# Import data
```{r}
sdrf <- read.table("../../data/zhuyi/dermatomyositis/data/E-MTAB-2967/E-MTAB-2967.sdrf.txt", 
                   sep = "\t", 
                   header = TRUE, 
                   quote = "\"") %>% 
  clean_names()
rownames(sdrf) <- sdrf$array_data_file
sdrf
```

```{r}
files <- dir_ls("../../data/zhuyi/dermatomyositis/data/E-MTAB-2967/files/", type = "file")
files %>% str

raw_data <- read.celfiles(filenames = files, 
                          verbose = TRUE)
stopifnot(validObject(raw_data))
raw_data %>% rownames()

es <- ExpressionSet(assayData = exprs(raw_data)[, rownames(sdrf)], 
                    phenoData = AnnotatedDataFrame(sdrf))

validObject(es)
```

```{r}
phenoData(es) %>% pData()
```

```{r}
pData(es) <- pData(es)[, c("source_name", "characteristics_individual", "factor_value_disease", "factor_value_phenotype")]
pData(es)
```

# quality control
```{r}
es %>% exprs %>% .[1:5, 1:5]
```

```{r}
exp_raw <- es %>% exprs %>% log2
pcas <- exp_raw %>% t %>% prcomp(scale. = FALSE)

percentVar <- 100 * (pcas$sdev^2 / sum(pcas$sdev^2)) %>% round(digits = 4)

df <- data.frame(PC1 = pcas$x[, 1], 
                 PC2 = pcas$x[, 2], 
                 disease = pData(es)$factor_value_disease, 
                 phenotype = pData(es)$factor_value_phenotype, 
                 individual = pData(es)$characteristics_individual)
df
```

```{r}
df %>% 
  ggplot(aes(PC1, PC2)) +
  geom_point(aes(shape = disease, color = phenotype)) +
  ggtitle("PCA plot of the log-transformed raw expression data") +
  xlab(paste0("PC1, VarExp: ", percentVar[1], "%")) +
  ylab(paste0("PC2, VarExp: ", percentVar[2], "%")) +
  scale_shape_manual(values = c(4, 15)) +
  scale_color_manual(values = c("darkorange2", "dodgerblue4"))
```

```{r}
oligo::boxplot(raw_data, 
               target = "core", 
               main = "Boxplot of log2-intensites for the raw data")
```

```{r}
oligo::hist(raw_data, target = "core", which = "pm")
```

```{r}
arrayQualityMetrics::arrayQualityMetrics(es, 
                                         outdir = "./", 
                                         force = TRUE, 
                                         do.logtransform = TRUE, 
                                         intgroup = c("factor_value_disease"))
```

# Background adjustment, calibration, summarization and annotation
## Bacground adjustment
After the initial import and quality assessment, the next step in processing of microarray data is background adjustment. This is essential because a proportion of the measured probe intensities are due to non-specific hybridization and the noise in the optical detection system. Therefore, observed intensities need to be adjusted to give accurate measurements of specific hybridization.

## Across-array normalization (calibration)
Normalization across arrays is needed in order to be able to compare measurements from different array hybridizations due to many obscuring sources of variation. These include different efficiencies of reverse transcription, labeling or hybridization reactions, physical problems with the arrays, reagent batch effects, and laboratory conditions.

## Summarization
After normalization, summarization is necessary to be done because on the `Affymetrix` platform, transcripts are represented by multiple probes, that is multiple locations on the array. For each gene, the background-adjusted and normalized intensities of all probes need to be summarized into one quantity that estimates an amount proportional to the amount of RNA transcript.

After the summarization step, the summarized data can be annotated with various information, e.g. gene symbols and ENSEMBL gene identifiers. There is an annotation database available from Bioconductor for our platform, namely the package `hugene10sttranscriptcluster.db`.

## Old nand new 'probesets' of Affymetrix microarrays
Traditionally, Affymetrix arrays (the so-called 3’ IVT arrays) were probeset based: a certain fixed group of probes were part of a probeset which represented a certain gene or transcript (note however, that a gene can be represented by multiple probesets).

The more recent “Gene” and “Exon” Affymetrix arrays are exon based and hence there are two levels of summarization to get to the gene level. The “probeset” summarization leads to the exon level. The gene / transcript level is given by “transcript clusters”. Hence, the appropriate annotation package for our chip type is called `hugene10sttranscriptcluster.db`.

“Gene” arrays were created as affordable versions of the “Exon” arrays, by only taking the “good” probes from the Exon array. Initially on the Exon array, at least four probes were part of one “Exon”. With the thinned out “Gene” array, many probesets were made up of three or fewer probes. Single probesets are indicated by single colours; probesets representing one gene are indicated by a colour shade: e.g., all yellow probes belong to one Exon, and all yellow, orange and red probesets belong to one gene.

## One-step preprocessing in oligo
The package `oligo` allows us to perform background correction, normalization and summarization in one single step using a deconvolution method for background correction, quantile normalization and RMA (robust multichip average) algorithm for summarization.

This series of steps as a whole is commonly referred to as RMA algorithm, although strictly speaking RMA is merely a summarization method.

# Relative log expression data quality analysis
Before calibrating and evaluating the data, we want to perform another quality control procedure, namely Relative log expression (RLE), as described in the article by Gandolfo. To this end, we first perform an RMA without prior normalization.

## Computing the RLE
The RLE is performed by calculating the median log2 intensity of every transcript across all arrays.

We do this by calculating the row medians of `exprs(palmieri_eset)`, as the transcripts are represented by the rows and the single microarrays by the columns.  

Note that we do not have to apply the log2 manually, as the output data of the RMA function is in log2 scale by default.

We then substract this transcript median intensity from every transcript intensity via the `sweep` function.

# RMA calibration of the data
Now, we can apply the full RMA algorithm to our data in order to background-correct, normalize and summarize.

```{r}
palmieri_eset_norm <- oligo::rma(raw_data, target = "core")
```

## Quality assessment of the calibrated data
```{r}
expr_palmieri <- palmieri_eset_norm %>% exprs
pcas <- prcomp(t(expr_palmieri), scale = FALSE)

percentVar <- round(100 * pcas$sdev^2 / sum(pcas$sdev^2), digits = 1)
df <- data.frame(
  pc1 = pcas$x[, 1, drop = TRUE], 
  pc2 = pcas$x[, 2, drop = TRUE], 
  disease = pData(es)$factor_value_disease,
  phenotype = pData(es)$factor_value_phenotype
)

df %>% 
  ggplot(aes(pc1, pc2)) +
  geom_point(aes(shape = disease, color = phenotype)) +
  ggtitle("PCA plot of the calibrated, summarized data") +
  labs(x = paste("PC1, VarExp: ", percentVar[1], "%", sep = ""), 
       y = paste("PC2, VarExp: ", percentVar[2], "%", sep = "")) +
  scale_shape_manual(values = c(4, 15)) +
  scale_color_manual(values = c("darkorange2", "dodgerblue4"))
```

```{r}
phenotype <- ifelse(str_detect(pData(es)$factor_value_phenotype, "non-"), "non_infl", "infl")
disease <- ifelse(str_detect(pData(es)$factor_value_disease, "Crohn"), "CD", "UC")

annotation_for_heatmap <- data.frame(phenotype = phenotype, 
                                     disease = disease, 
                                     row.names = rownames(pData(palmieri_eset_norm)))

annotation_for_heatmap
```

```{r}
dists <- dist(t(expr_palmieri), method = "euclidean") %>% as.matrix()
diag(dists) <- NA

ann_colors <- list(phenotype = c(non_infl = "chartreuse4", infl = "burlywood3"), 
                   disease = c(CD = "blue4", UC = "cadetblue2"))

pheatmap::pheatmap(mat = dists, 
                   annotation_row = annotation_for_heatmap, 
                   annotation_colors = ann_colors, 
                   legend = TRUE, 
                   legend_breaks = c(min(dists, na.rm = TRUE) * 1.3, max(dists, na.rm = TRUE) * 0.9), 
                   legend_labels = c("low", "high"), 
                   color = viridis::viridis(255, option = "B"), 
                   main = "Clustering heatmap for the calibrated samples")
```

# Filtering based on intensity
We now filter out lowly expressed genes. Microarray data commonly show a large number of probes in the background intensity range. These probes also do not change much across arrays. Hence they combine a low variance with a low intensity. Thus, they could end up being detected as differentially expressed although they are barely above the "detection" limit and are not very informative in general.

We will perform a "soft" intensity based filtering here, since this recommended by the `limma` user guide. 

However, note that a variance based filtering might exclude a similar set of probes in practice. For intensity-based filtering, we calculate the row-wise medians from the expression data, as they represent the transcript medians. 

```{r}
palmieri_medians <- rowMedians(exprs(palmieri_eset_norm))
table(palmieri_medians > 4) %>% prop.table()

man_threshold <- 4
hist_res <- hist(palmieri_medians, 
                 breaks = 150, 
                 col = "cornsilk1", 
                 freq = FALSE, 
                 border = "antiquewhite4", 
                 main = "Histogram of the median intensities")
abline(v = 4, lwd = 2, col = "coral4")
```

```{r}
palmieri_row_var <- palmieri_eset_norm %>% exprs() %>% matrixStats::rowSds()
hist(palmieri_row_var, 
     breaks = 150, 
     col = "cornsilk1", 
     freq = FALSE, 
     border = "antiquewhite4", 
     main = "Histogram of the row standard deviation")
abline(v = 0.2322)
```

From the histogram of the gene-wise medians, we can clearly see an enrichment of low medians on the left hand side. These represent the genes we want to filter. In order to infer a cutoff from the data, we inspect the histogram. We visually set a cutoff line to the left of the histogram peak in order not to exclude too many genes. In our example, we choose a threshold of 4. We plot the same histogram as before and add the threshold line with the `abline` function.

Transcripts that do not have intensities larger than the threshold in at least as many arrays as the smallest experimental group are excluded.

In order to do so, we first have to get a list with the number of samples (=arrays) in the experimental groups.
```{r}
no_of_samples <- table(paste0(pData(es)$factor_value_disease, 
                              "_", 
                              pData(es)$factor_value_phenotype))
no_of_samples
```

```{r}
sample_cutoff <- min(no_of_samples)
idx_man_threshold <- apply(exprs(palmieri_eset_norm), 1, function(x){
  sum(x > man_threshold) >= sample_cutoff
})

table(idx_man_threshold)
```

```{r}
palmieri_manfiltered <- subset(palmieri_eset_norm, idx_man_threshold)
```


# Annotation of the transcript clusters
```{r}
hugene10sttranscriptcluster.db %>% columns
anno_palmieri <- AnnotationDbi::select(x = hugene10sttranscriptcluster.db, 
                                       keys = featureNames(palmieri_manfiltered), 
                                       keytype = "PROBEID", 
                                       columns = c("SYMBOL", "GENENAME"))
anno_palmieri <- subset(anno_palmieri, !is.na(SYMBOL))
```

## Removing multiple mappings
Filtering out probes mapped to multiple genes.
```{r}
anno_summarized <- anno_palmieri %>% 
  dplyr::group_by(PROBEID) %>%
  dplyr::summarise(no_of_matches = n_distinct(SYMBOL))

anno_summarized

anno_filtered <- anno_summarized %>% dplyr::filter(no_of_matches > 1)
anno_filtered
ids_to_exclude <- (featureNames(palmieri_manfiltered) %in% anno_filtered$PROBEID)
ids_to_exclude %>% table

palmieri_final <- subset(palmieri_manfiltered, !ids_to_exclude)
palmieri_final
```

```{r}
fData(palmieri_final)$PROBEID <- rownames(fData(palmieri_final))
palmieri_final

fData(palmieri_final) <- dplyr::left_join(fData(palmieri_final), anno_palmieri, by = "PROBEID")
rownames(fData(palmieri_final)) <- fData(palmieri_final)$PROBEID
palmieri_final %>% fData

palmieri_final %>% validObject()
```

# Linear models
In order to analyse which genes are differentially expressed between inflamed and non-inflamed tissue, we have to fit a linear model to our expression data. Linear models are the “workhorse” for the analysis of experimental data. They can be used to analyse almost arbitrarily complex designs, however they also take a while to learn and understand and a thorough description is beyond the scope of this workflow.

## Linear models for microarrays
We now apply linear models to microarrays. Specifically, we discuss how to use the limma package for differential expression analysis. The package is designed to analyze complex experiments involving comparisons between many experimental groups simultaneously while remaining reasonably easy to use for simple experiments. The main idea is to fit a linear model to the expression data for each gene. Empirical Bayes and other methods are used to borrow information across genes for the residual variance estimation leading to “moderated” t-statistics, and stabilizing the analysis for experiments with just a small number of arrays. Conceptually, the final per gene variance is a mix of a prior variance and the per gene variance.

## A linear model for the data
For the subsequent linear modelling of the data, we introduce the abbreviations “UC” and “CD” for the disease types, and “non_infl.” and “infl.” for the phenotypes, respectively.

```{r}
individual <- as.character(pData(palmieri_final))
```


## Analysis of differential expression based on a single gene
For linear model fitting and subsequent testing for differential expression by t-test, we will pick the gene with the PROBEID. It has the symbol CRAT and will be named as such in the following code.

**Illustration of the fitted linear model on the CRAT gene**  

Before fitting the linear model, we have a look at the expression intensities of this gene for each patient in non-inflamed and inflamed tissue, respectively.
































