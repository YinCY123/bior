---
title: "nasa"
author: "YinCY"
format: html
editor: source
---

```{r}
#| message: false
#| warning: false

library(fs)
library(R.utils)
library(magrittr)
library(DropletUtils)
library(scater)
library(scran)
library(bluster)
library(EnsDb.Mmusculus.v79)
library(batchelor)
library(SingleCellExperiment)
library(magrittr)
library(scDblFinder)
```

```{r}
files <- dir_ls("/home/yincy/git/data/parttime/nasa/data/", type = "file")
for(file in files){unzip(zipfile = file, exdir = "/home/yincy/git/data/parttime/nasa/data/")}
```

```{r}
samples <- dir_ls("/home/yincy/git/data/parttime/nasa/", type = "directory", recurse = TRUE)
samples <- grep("filtered$", samples, value = TRUE)
samples %>% str

sample_names <- strsplit(samples, "/") %>% sapply("[[", 9)
```

```{r}
sces <- read10xCounts(samples = samples, 
                      sample.names = sample_names, 
                      col.names = TRUE, 
                      type = "sparse", 
                      BPPARAM = BiocParallel::MulticoreParam(workers = 10))
sces %>% rowData()
sces %>% colData()
rowData(sces)$chr <- mapIds(x = EnsDb.Mmusculus.v79, 
                            keys = rownames(rowData(sces)), 
                            keytype = "GENEID", 
                            column = "SEQNAME")
rowData(sces)
sces$Sample %>% table
```

```{r}
# cell qc
is_mito <- rowData(sces)$chr == "MT"
is_mito <- ifelse(is.na(is_mito), FALSE, is_mito)
is_mito %>% table
stats <- perCellQCMetrics(x = sces, 
                          subsets = list(mito = is_mito), 
                          BPPARAM = BiocParallel::MulticoreParam(10))

qc_sum <- isOutlier(stats$sum, type = "both", log = TRUE, batch = sces$Sample)
qc_sum %>% table

qc_detected <- isOutlier(stats$detected, type = "both", log = TRUE, batch = sces$Sample)
qc_detected %>% table

qc_mito <- isOutlier(stats$subsets_mito_percent, type = "higher", log = TRUE, batch = sces$Sample)
qc_mito %>% table

qc <- qc_sum | qc_detected | qc_mito
qc %>% table

sces <- sces[, !qc]
```

```{r}
# gene qc
stats <- perFeatureQCMetrics(sces)
stats
qc <- stats$detected > 0
qc %>% table
sces <- sces[qc, ]
sces
saveRDS(sces, "/home/yincy/git/data/parttime/nasa/nasa.rds")
```

```{r}
set.seed(101)
sces <- readRDS("/home/yincy/git/data/parttime/nasa/nasa.rds")
qclusters <- quickCluster(sces, 
                          method = "igraph", 
                          use.rank = TRUE, 
                          d = 100, 
                          block = sces$Sample, 
                          BPPARAM = BiocParallel::MulticoreParam(10))
qclusters %>% table

sces <- computePooledFactors(x = sces, 
                             clusters = qclusters, 
                             BPPARAM = BiocParallel::MulticoreParam(10))
sces <- multiBatchNorm(sces, batch = sces$Sample)

stats <- modelGeneVar(x = sces, block = sces$Sample)
stats[order(stats$bio, decreasing = T), ]
hvgs <- getTopHVGs(stats, var.threshold = 0)
hvgs %>% str
```

```{r}
set.seed(101)
cur <- sces
cur <- batchCorrect(cur, 
                    batch = cur$Sample,
                    subset.row = hvgs, 
                    correct.all = TRUE, 
                    PARAM = FastMnnParam(k = 10, d = 100, auto.merge = TRUE, 
                                         BPPARAM = BiocParallel::MulticoreParam(10)))
assay(sces, "reconstructed") <- assay(cur, "reconstructed")
reducedDim(sces, "corrected") <- reducedDim(cur, "corrected")
rm(cur);gc()
```

```{r}
set.seed(101)
sces <- runTSNE(x = sces, 
                dimred = "corrected", 
                assay.type = "reconstructed", 
                perplexity = 50, 
                num_threads = 10, 
                BPPARAM = BiocParallel::MulticoreParam(10))
```

```{r}
set.seed(101)
sces <- scDblFinder(sce = sces, clusters = sces$clusters, samples = sces$Sample)
sces$scDblFinder.class %>% table
sces <- sces[, sces$scDblFinder.class == "singlet"]


set.seed(101)
clusters <- clusterRows(x = reducedDim(sces, "corrected"), 
                        BLUSPARAM = NNGraphParam(BPPARAM = BiocParallel::MulticoreParam(10), k = 10))
clusters %>% table
colData(sces)$clusters <- factor(clusters)

saveRDS(sces, "/home/yincy/git/data/parttime/nasa/preprocessed_nasa.rds")
```

```{r}
sces <- readRDS("/home/yincy/git/data/parttime/nasa/preprocessed_nasa.rds")
sces %>% colData

plotReducedDim(sces, 
               dimred = "TSNE", 
               colour_by = "clusters",
               point_size = 0.5) +
  theme(legend.position = "none")
```

# reference
```{r}
#| message: false
#| warning: false

library(data.table)
library(magrittr)
library(stringr)
library(stringr.plus)
library(EnsDb.Mmusculus.v79)
library(SingleCellExperiment)
library(scran)
library(scater)
library(bluster)
library(batchelor)
library(Seurat)

GSE122465 <- fread("/home/yincy/git/data/parttime/nasa/reference/GSE122465/GSE122465_FilteredCounts10x.csv.gz", 
                   sep = ",", 
                   header = TRUE) %>% 
    as.data.frame()
GSE122465 %>% dim

gene_info <- data.frame(symbol = GSE122465$V1, 
                        ensembl = mapIds(EnsDb.Mmusculus.v79, keys = GSE122465$V1, keytype = "SYMBOL", column = "GENEID"))
gene_info$ensembl %>% is.na() %>% table
gene_info <- gene_info %>% dplyr::filter(!is.na(ensembl)) %>% tibble::remove_rownames() %>% magrittr::set_rownames(value = .$ensembl)
gene_info %>% head

GSE122465 <- GSE122465 %>% dplyr::filter(V1 %in% gene_info$symbol)
```

```{r}
cell_info <- data.frame(barcodes = GSE122465 %>% colnames() %>% .[-1], 
                        row.names = GSE122465 %>% colnames() %>% .[-1])

cell_info %>% dim
cell_info %>% tail
batch <- str_extract_between(cell_info$barcodes, 
                             pattern1 = "_", 
                             pattern2 = "_", 
                             which_pattern1 = "first", 
                             which_pattern2 = "last") %>% 
  str_extract_after(pattern = "_")
batch %>% table

cell_info$batch <- batch
cell_info
```

```{r}
mtx <- dplyr::inner_join(GSE122465, gene_info, by = c("V1" = "symbol")) %>% 
  dplyr::relocate(ensembl, .before = V1)
mtx <- mtx %>% tibble::column_to_rownames("ensembl") %>% dplyr::select(-V1) %>% as.matrix()
mtx[1:10, 1:10]
```

```{r}
GSE122465 <- SingleCellExperiment(assays = list(counts = as(mtx, "CsparseMatrix")), 
                                  rowData = gene_info, 
                                  colData = cell_info)
GSE122465
GSE122465 %>% colData
GSE122465 %>% rowData
saveRDS(GSE122465, "/home/yincy/git/data/parttime/nasa/reference/GSE122465.rds")
```


```{r}
# unzip("/home/yincy/git/data/parttime/nasa/reference/RNAMagnetDataBundle.zip", 
#       exdir = "/home/yincy/git/data/parttime/nasa/reference/")
load("/home/yincy/git/data/parttime/nasa/reference/NicheData10x.rda")
NicheData10x <- Seurat::UpdateSeuratObject(NicheData10x)
NicheData10x[[]]$cell_type <- Idents(NicheData10x)
cell_type_df <- NicheData10x[[]]
cell_types <- setNames(cell_type_df$cell_type, rownames(cell_type_df))

colData(GSE122465)$cell_types <- cell_types[GSE122465$barcodes]
colData(GSE122465)
saveRDS(GSE122465, "/home/yincy/git/data/parttime/nasa/reference/processed_GSE122465.rds")
```

```{r}
qclusters <- quickCluster(x = GSE122465, 
                          min.size = 50,
                          d = 50, 
                          method = "igraph", 
                          use.rank = TRUE, 
                          BPPARAM = BiocParallel::MulticoreParam(10), 
                          block = GSE122465$batch)
qclusters %>% table
GSE122465$qclusters <- factor(qclusters)

GSE122465 <- computePooledFactors(x = GSE122465, clusters = GSE122465$qclusters)
GSE122465 <- logNormCounts(x = GSE122465, size.factors = GSE122465$sizeFactor)
dec <- modelGeneVar(GSE122465, block = GSE122465$batch)
dec[order(dec$bio, decreasing = T), ]
hvgs <- getTopHVGs(dec, var.threshold = 0)
hvgs %>% str
```

```{r}
cur <- GSE122465
cur <- fastMNN(cur, 
               batch = cur$batch, 
               auto.merge = TRUE, 
               subset.row = hvgs, 
               correct.all = TRUE, 
               d = 100, 
               k = 10, 
               BPPARAM = BiocParallel::MulticoreParam(10))
cur
reducedDim(GSE122465, "corrected") <- reducedDim(cur, "corrected")
assay(GSE122465, "reconstructed") <- assay(cur, "reconstructed")
rm(cur);gc()
GSE122465
```

```{r}
GSE122465 <- runTSNE(GSE122465, 
                     dimred = "corrected", 
                     perplexity = 30, 
                     num_threads = 10)
GSE122465
saveRDS(GSE122465, "/home/yincy/git/data/parttime/nasa/reference/processed_GSE122465.rds")
```


# annotation nasa
```{r}
#| message: false
#| warning: false

library(SingleCellExperiment)
library(SingleR)
library(scran)
library(magrittr)
library(scater)

GSE122465 <- readRDS("/home/yincy/git/data/parttime/nasa/reference/processed_GSE122465.rds")
nasa <- readRDS("/home/yincy/git/data/parttime/nasa/preprocessed_nasa.rds")

GSE122465 %>% colData
nasa %>% colData

pred_label <- SingleR(test = nasa, 
                      ref = GSE122465, 
                      labels = GSE122465$cell_types, 
                      aggr.ref = TRUE, 
                      clusters = nasa$clusters, 
                      de.method = "classic",
                      assay.type.test = "logcounts", 
                      assay.type.ref = "logcounts", 
                      BPPARAM = BiocParallel::MulticoreParam(6))

pred_label$pruned.labels %>% table(useNA = "ifany")
cell_types <- setNames(pred_label$pruned.labels, rownames(pred_label))

colData(nasa)$cell_type <- cell_types[nasa$clusters]
colData(nasa) <- colData(nasa)[, c(1, 2, 3, 9, 10)]
colData(nasa)
nasa <- nasa[, !is.na(nasa$cell_type)]


samples <- nasa$Sample
samples <- samples %>% 
    strsplit(split = "_") %>% 
    lapply("[", 4:7) %>% 
    sapply(function(x){str_c(x, collapse = "_")})
colData(nasa)$sample <- samples
nasa %>% colData()

group <- nasa$sample %>% 
    strsplit("_") %>% 
    lapply("[", c(1, 3)) %>% 
    sapply(function(x){str_c(x, collapse = "_")})
colData(nasa)$group <- group
nasa %>% colData
nasa$group %>% table

saveRDS(nasa, "/home/yincy/git/data/parttime/nasa/preprocessed_nasa.rds")
```

```{r}
nasa$sample %>% unique
nasa$group %>% unique()
nasa$cell_type %>% unique
```


```{r}
plotReducedDim(nasa, 
               color_by = "Sample", 
               text_by = "cell_type", 
               dimred = "TSNE", 
               point_size = 0.5, 
               text_size = 2) +
  theme_classic() +
  theme(legend.position = "none")
```


# differential expression analysis
```{r}
?findMarkers
nasa$sample %>% table
fmarkers <- findMarkers(x = nasa, 
                        groups = nasa$cell_type, 
                        restrict = c("FLT_LAR_OLD_FO1", ""))
```







