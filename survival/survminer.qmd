---
title: "survminer"
author: "YinCY"
format: html
---

```{r}
#| message: false
#| warning: false

library(magrittr)
library(survminer)
library(RTCGA.clinical) # example data
```

# Example
we can create simple estimates of survival curves just after we put `survfit` (survival package) object into `ggsurvplot()` function. Let’s have a look at differences in survival times between patients suffering from Ovarian Cancer (Ovarian serous cystadenocarcinoma) and patients suffering from Breast Cancer (Breast invasive carcinoma), where data were collected by The Cancer Genome Atlas Project.

```{r}
BRCAOV_survInfo <- survivalTCGA(BRCA.clinical, 
             OV.clinical, 
             extract.cols = "admin.disease_code")

BRCAOV_survInfo
library(survival)
fit <- survfit(Surv(times, patient.vital_status) ~ admin.disease_code, 
               data = BRCAOV_survInfo)

ggsurvplot(fit, data = BRCAOV_survInfo, risk.table = TRUE)
```

This simple plot presents, in an elegant way, estimates of survival probability depending on days from cancer diagnostics grouped by cancer types and an informative risk set table, which shows the number of patients that were under observation in the specific period of time. Survival analysis is a specific field of data analysis because of the censored time to event data, so risk set size is a must in visual inference.

After few improvements (#1, #2, #3, #4, #7, #8, #12, #28), made by Alboukadel in version 0.2.0, one can create a powerful, informative survival plot with such specification of parameters.

```{r}
ggsurvplot(fit = fit, 
           data = BRCAOV.survInfo, 
           risk.table = TRUE, 
           pval = TRUE, 
           conf.int = TRUE, 
           xlim = c(0, 2000), 
           break.time.by = 500, 
           ggtheme = theme_minimal(), 
           risk.table.y.text.col = TRUE, 
           risk.table.y.text = FALSE)
```

# Playing with fonts and texts
## Basic
```{r}
library(survival)

fit <- survfit(Surv(time, status) ~ sex, data = lung)
ggsurvplot(fit, data = lung)
```

## Customized
with the plot where every possible text on a `plot` is specified.
```{r}
ggsurvplot(fit = fit, 
           data = lung, 
           title = "Survival curves", 
           subtitle = "Based on Kaplan-Meier estimates", 
           caption = "created with survminer", 
           font.title = c(16, "bold", "darkblue"), 
           font.subtitle = c(15, "bold.italic", "purple"), 
           font.caption = c(14, "plain", "orange"), 
           font.x = c(14, "bold.italic", "red"), 
           font.y = c(14, "bold.italic", "darkred"), 
           font.tickslab = c(12, "plain", "darkgreen"))
```

## Risk table
```{r}
ggsurvplot(fit = fit, 
           data = lung, 
           risk.table = TRUE)
```

## Customized
with the plot where every possible text on a `plot` and `table` is specified.

```{r}
ggsurvplot(fit = fit, 
           data = lung, 
           title = "Survival curves", 
           subtitle = "Based on Kaplan-Meier estimates", 
           caption = "created with survminer", 
           font.title = c(16, "bold", "darkblue"), 
           font.subtitle = c(15, "bold.italic", "purple"), 
           font.caption = c(14, "plain", "red"), 
           font.x = c(14, "bold.italic", "darkred"), 
           font.y = c(14, "bold.italic", "darkred"), 
           font.tickslab = c(12, "plain", "darkgreen"), 
           risk.table = TRUE, 
           risk.table.title = "Note the risk set sizes", 
           risk.table.subtitle = "and remember about censoring.", 
           risk.table.caption = "source code: website.com", 
           risk.table.height = 0.3)
```

## ncens plot
```{r}
ggsurvplot(fit = fit, 
           data = lung, 
           risk.table = TRUE, 
           ncensor.plot = TRUE)
```

## Specifying weights in log-rank comparisons
The regular Log-rank test is sensitive to detect differences in late survival times, where Gehan-Breslow and Tharone-Ware propositions might be used if one is interested in early differences in survival times. Peto-Peto modifications are also useful in early differences and are more robust (than Tharone-Whare or Gehan-Breslow) for situations where many observations are censored. The most flexible is Fleming-Harrington method for weights, where high `p` indicates detecting early differences and high `q` indicates detecting differences in late survival times. But there is always an issue on how to detect `p` and `q`.

```{r}
library(survival)

lung
fit <- survfit(Surv(time, status) ~ sex, data = lung)
```

log-rank (survdiff)
```{r}
ggsurvplot(fit = fit, 
           data = lung, 
           pval = TRUE, 
           pval.method = TRUE)
```

log-rank (comp)
```{r}
ggsurvplot(fit = fit, 
           data = lung, 
           pval = TRUE, 
           pval.method = TRUE, 
           log.rank.weights = "1")
```

Gehan-Breslow (generalized Wilcox)

```{r}
ggsurvplot(fit = fit, 
           data = lung, 
           pval = TRUE, 
           pval.method = TRUE, 
           log.rank.weights = "n", 
           pval.method.coord = c(5, 0.1), 
           pval.method.size = 3)
```

Tharone-Ware
```{r}
ggsurvplot(fit = fit, 
           data = lung, 
           pval = TRUE, 
           pval.method = TRUE, 
           log.rank.weights = "sqrtN", 
           pval.method.coord = c(3, 0.1), 
           pval.method.size = 4)
```

Peto-Peto’s modified survival estimate

```{r}
ggsurvplot(fit = fit, 
           data = lung, 
           pval = TRUE, 
           pval.method = TRUE, 
           log.rank.weights ="S1", 
           pval.method.coord = c(5, 0.1), 
           pval.method.size = 3)
```

modified Peto-Peto’s (by Andersen)

```{r}
ggsurvplot(fit = fit, 
           data = lung, 
           pval = TRUE, 
           pval.method = TRUE, 
           log.rank.weights = "S2", 
           pval.method.coord = c(5, 0.1), 
           pval.method.size = 3)
```

Fleming-Harrington (p=1, q=1)

```{r}
ggsurvplot(fit = fit, 
           data = lung, 
           pval = TRUE, 
           pval.method = TRUE, 
           pval.rank.weights = "FH_p=1_q=1", 
           pval.method.coord = c(5, 0.1), 
           pval.method.size = 4)
```


# ggforest: How to Show Interactions Hazard Ratio
## Introduction
In general case it may be tricky to automatically extract interactions or variable transformations from model objects. A suggestion would be to create manually new variables that capture desired effects of interactions and add them to the model in an explicit way. This article describe an example of how to do this.

## Load required R packages
```{r}
library(survminer)
library(survival)
```

## Compute a Cox model with interaction terms
```{r}
res.cox <- coxph(Surv(time, status) ~ ph.karno * age, data = lung)
summary(res.cox, conf.int = FALSE)
```

Visualization of the harzard rations using the function `ggforest()`.

```{r}
ggforest(model = res.cox, 
         data = lung)
```









