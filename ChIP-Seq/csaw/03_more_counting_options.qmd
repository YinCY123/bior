---
title: "03 More counting options"
author: "YinCY"
format: html
---

# Avoiding problematic genomic regions
Read extraction and counting can be restricted to particular chromosomes by specifying the names of the chromosomes of interest in `restrict`. This avoids the need to count reads on unassigned contigs or uninteresting chromosomes, e.g., the mitochondrial genome for ChIP-seq studies targeting nuclear factors. Alternatively, it allows `windowCounts()` to work on huge datasets or in limited memory by analyzing only one chromosome at a time.

```{r}
#| message: false
#| warning: false

library(csaw)

restrict.param <- readParam(restrict = c("chr1", "chr10", "chrX"))
```

Reads lying in certain regions can also be removed by specifying the coordinates of those regions in `discard`. This is intended to remove reads that are wholly aligned within known repeat regions but were not removed by the `minq` filter. Repeats are problematic as different repeat units in an actual genome are usually reported as a single unit in the genome build. Alignment of all (non-specifically immunoprecipitated) reads from the former will result in artificially high coverage of the latter. More importantly, any changes in repeat copy number or accessibility between conditions can lead to spurious DB at this single unit. Removal of reads within repeat regions can avoid detection of these irrelevant differences.

```{r}
repeats <- GRanges(seqnames = "chr1", 
                   ranges = IRanges(3000001, 3041000))
discard.param <- readParam(discard = repeats)
```

Coordinates of annotated repeats can be obtained from several different sources.

- A curated blacklist of problematic regions is available from the ENCODE project for various organisms. This list is constructed empirically from the ENCODE datasets and includes obvious offenders like telomeres, microsatellites and some rDNA genes. We generally prefer to use the ENCODE blacklist most applications where blacklisting is necessary.

- Alternatively, repeats can be predicted from the genome sequence using software like `RepeatMasker`. These calls are available from UCSC website or they can be extracted from an appropriate masked `BSgenome` object. This contains contains a greater number of problematic regions compared to the ENCODE blacklist, though genuine DB sites may also be removed.

- If negative control samples are available, they can be used to empirically identify problemtic regions with the `GreyListChIP` package. These regions should be ignored as they have high coverage in the controls and are unlikely to be genuine binding sites.

Using `discard` is more appropriate than simply ignoring windows that overlap the repeat regions. For example, a large window might contain both repeat and non-repeat regions. Discarding the window because of the former will compromise detection of DB features in the latter. Of course, any DB sites within the discarded regions will be lost from downstream analyses.
Some caution is therefore required when specifying the regions of disinterest. For example, many more repeats are called by `RepeatMasker` than are present in the ENCODE blacklist, so the use of the former may result in loss of potentially interesting features.

# Increasing speed and memory efficiency
The `spacing` parameter controls the distance between adjacent windows in the genome. By default, this is set to 50 bp, i.e., sliding windows are shifted 50 bp forward at each step. Using a higher value will reduce computational work as fewer features need to be counted, and may be useful when machine memory is limited. Of course, spatial resolution is lost with larger spacings as adjacent positions are not counted and thus cannot be distinguished.

```{r}
#| message: false
#| warning: false

library(chipseqDBData)
tf.data <- NFYAData()
tf.data

bam.files <- head(tf.data$Path, -1)
bam.files

library(csaw)
frag.len <- 110
win.width <- 10
parm <- readParam(minq = 20)
data <- windowCounts(bam.files = bam.files, 
                     ext = frag.len, 
                     width = win.width, 
                     param = param)
data
```

```{r}
demo <- windowCounts(bam.files = bam.files, 
                     spacing = 100, 
                     ext = frag.len, 
                     width = win.width, 
                     param = param)
demo %>% rowRanges()
```

While the default is usually satisfactory, users can improve efficiency by increasing the spacing to a value up to `(width + ext)/2`. This reduces the computational work by decreasing the number of windows and extracted counts. Any loss in spatial resolution due to a larger spacing interval is negligible compared to that already lost by using a large window size. The suggested upper bound ensures that a narrow binding site will not be overlooked if it falls between two windows.

Windows that are overlapped by few fragments are `filtered` out based on the filter argument. A window is removed if the sum of counts across all libraries is below `filter`. This improves memory efficiency by discarding the majority of low-abundance windows corresponding to uninteresting background regions. The default value of the filter threshold is 10, though it can be raised to reduce memory usage for large libraries. More sophisticated filtering is recommended and should be applied later.

```{r}
demo <- windowCounts(bam.files = bam.files, 
                     ext = frag.len, 
                     width = win.width, 
                     filter = 30, 
                     param = param)

demo %>% assay %>% head
```

User can parallelize read counting and several other functions by setting the `BPPARAM` argument. This will load and process reads from multiple BAM files simultaneously. The number of workers and type of parallelization can be specified using `BiocParallelParam` objects. By default, parallelization is turned off because it provides little benifit for small files or no systems with I/O boottlenecks.

# Dealing with paired-end data
Paired-end datasets are accomodated by setting `pe="both"` in the `param` object supplied to `windowCounts()`. Read extension is not required as the genomic interval spanned by the originating fragment is explicitly defined as that between the 5â€™ positions of the paired reads. The number of fragments overlapping each window is then counted as previously described. By default, only proper pairs are used in which the two paired reads are on the same chromosome, face inward and are no more than `max.frag` apart.

```{r}
# using the BAM file Rsamtools as an example
pe.bam <- system.file("extdata", "ex1.bam", 
                      package = "Rsamtools", 
                      mustWork = TRUE)
pe.param <- readParam(max.frag = 400, pe = "both")
demo <- windowCounts(bam.files = pe.bam, 
                     param = pe.param,
                     ext = 250)

demo$totals
```

A suitable value for `max.frag` is chosen by examing the distribution of fragment sizes from the `getPESizes()` function. In this example, we might use a value of around 400 bp as it is larger than the vast majority of fragment sizes. The plot can also be used to examine the quality of the PE sequencing procedure. The location of the mode should be consistent with the fragmentation and size selection steps in library preparation.

```{r}
out <- getPESizes(pe.bam)
frag.size <- out$sizes[out$sizes <= 800]
hist(frag.size, 
     breaks = 50, 
     xlab = "Fragment sizes (bp)", 
     ylab = "Frequency", 
     main = "", 
     col = "grey80")
abline(v = 400, col = "red", lty = 2)
```

Th number of fragments exceeding the maximum size is recorded for quality control. The `getPESizes()` function also returns the number of single reads, pairs with one unmapped read, improperly orientated pairs and inter-chromosomal pairs. A non-negligble proportion of these reads may be indicative of problems with paired-end alignment or sequencing.

```{r}
c(out$diagnostics, too.large = sum(out$sizes > 400))
```

Note that all of the paired-end methods in csaw depend on correct mate information for each alignment. This is usually enforced by the aligner in the output BAM file. Any file manipulations that might break the synchronisation should be corrected (e.g., with the FixMateInformation program from the Picard suite) prior to read counting.

Paired-end data can also be treated as single-end by specifiying `pe="first"` or `"second"` in the `readParam()` constructor. This will only use the first or second read of each read pair, regardless of the validity of the pair or the relative quality of the alignments. This setting may be useful for contrasting paired- and single-end analyses, or in disastrous situations where paired-end sequencing has failed, e.g., due to ligation between DNA fragments.

```{r}
first.param <- readParam(pe = "first")
demo <- windowCounts(bam.files = pe.bam, 
                     param = first.param)

demo$totals
```

# Other counting strategies
### assigning reads into bins
Setting `bin=TRUE` will direct `windowCounts()` to count reads into contiguous bins across the genome. Here, `spacing` is set to `width` such that each window forms a bin. **For single-end data, only the 5' end of each read is used for counting into bins, without any directional extension. For paired-end data, the midpoint of the originating fragment is used**.

```{r}
demo <- windowCounts(bam.files = bam.files, 
                     width = 1000, 
                     bin = TRUE, 
                     param = param)
demo %>% rowRanges %>% head
```

The `filter` argument is automatically set t 1, which means that counts will be returned for each non-empty genomic bin. Users should set `width` to a reasonably large value, to avoid running out of memory with a large number of small bins. We can also force `windowCounts()` to return bins for all bins by setting `filter=0` manually.

### Manually specified regions
While csaw focuses on counting reads into windows, it may be occasionally desirable to use the same conventions when counting reads into pre-specified regions. This can be performed with the `regionCounts()` function, which is largely a wrapper for `countOverlaps()` from the `Genomicranges` package.

```{r}
my.regions <- GRanges(seqnames = c("chr11", "chr12", "chr15"), 
                      ranges = IRanges(start = c(75461351, 95943801, 21656501), 
                                       end = c(75461610, 95944810, 21657610)))

reg.counts <- regionCounts(bam.files = bam.files, 
                           regions = my.regions, 
                           ext = frag.len, 
                           param = param)

reg.counts %>% assay
```


### Strand-specif counting
Techniques like CLIP-seq, MeDIP-seq or CAGE provide strand-specific sequence information. `csaw` can analyze these datasets through strand-specific counting via the `strandedCounts()` wrapper function. The strand of each output range indicates the strand on which reads were counted for that row. Up to two rows can be generated for each window or region, depending on filtering.

```{r}
ss.param <- initialize(param, forward = logical(0))
ss.count <- strandedCounts(bam.files = bam.files, 
                           ext = frag.len, 
                           width = win.width, 
                           param = ss.param)

ss.count %>% rowRanges %>% strand
```

Note that `strandedCounts()` operates internally by calling `windowCounts()` (or `regionCounts()`) twice with different settings for `param$forward`. Specifically, setting `forward=TRUE` or `FALSE` would direct `windowCounts()` to only count reads on the forward or reverse strand. `strandedCounts()` itself will only accept a `logical(0)` value for this slot, in order to protect the user; any attempt to re-use `ss.param` in functions that are not designed for strand specificity will (appropriately) raise an error.

## Handling variable fragment lengths
In rare cases, there will be large systematic differences in the fragment lengths between libraries. For example, samples with less efficient fragmentation will exhibit larger fragment lengths and wider peaks. Single-end reads in the peaks of such libraries will require more directional extension to impute a fragment interval that covers the binding site. The `windowCounts()` function supports the use of library-specific fragment lengths, though some work is required to avoid detecting irrelevant DB from differences in peak widths. This is achieved by resizing the inferred fragments to the same length in all libraries. Consider a bimodal peak, present in several libraries that have different fragment lengths. Resizing ensures that the subpeak on the forward strand is centered at the same location in each library - similarly, for the subpeak on the reverse strand. Thus, the effect of differences in peak width between libraries can be largely mitigated.

Variable read extension is performed in `windowCounts()` by setting ext to a list with two elements. The first element is a vector where each entry specifies the average fragment length to be used for the corresponding library. The second specifies the final length to which the inferred fragments are to be resized. If the second element is set to `NA`, no rescaling is performed and the library-specific fragment sizes are used directly. This also works for analyses with paired-end data, though the first element of ext will be ignored as directional extension is not performed. The example below rescales all fragments to 200 bp in all libraries. Extension information is stored in the `RangedSummarizedExperiment` object for later use.

```{r}
multi.frag.len <- list(c(100, 150, 200, 250), 200)
demo <- windowCounts(bam.files = bam.files, 
                     ext = multi.frag.len, 
                     filter = 30, 
                     param = param)

demo$ext
```

That said, use of different extension lengths is generally unnecessary in well-controlled datasets. Difference in lengths between libraries are usually smaller than 50 bp. This is less than the inherent variability in fragment lengths within each library. The effect on the coverage profile of within-libarry variability in lengths will likely mask the effect of small between-library differences in the average lengths.




